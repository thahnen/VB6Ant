<?xml version="1.0" encoding="UTF-8" ?>
<project name="VB6Ant" default="vb6.help" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <description>
        "Build system" for Visual Basic 6 (Classic) that brings the development process of legacy
        applications to the mordern era. Based on Apache Ant as the declarative build tool and the
        uniform "Visual Basic 6 (Classic) project structure".
    </description>

    <!-- directory of this Ant script -->
    <dirname property="VB6Ant.dir" file="${ant.file}" />



    <!-- ======================================================================================
                                            MACRO DEFINITIONS
         ====================================================================================== -->



    <!--
        Check if a property is available

        IN:     name        -> the property name
    -->
    <macrodef name="checkPropertyAvailable" description="Check if property is available">
        <attribute name="name" />

        <sequential>
            <fail message="[${ant.project.name}] The property '@{name}' does not exist!">
                <condition>
                    <not>
                        <isset property="@{name}" />
                    </not>
                </condition>
            </fail>
        </sequential>
    </macrodef>


    <!--
        General macro to call VB6.EXE with command line arguments

        IN:     args        -> command line arguments for the VB6.EXE
    -->
    <macrodef name="vb6" description="General macro to call VB6.EXE">
        <attribute name="args" default="" />

        <sequential>
            <exec executable="${VB6.path}\VB6.EXE"
                  dir="${scripts.dir}/.."
                  resultproperty="exit.code">
                <arg line="@{args}" />
            </exec>

            <fail message="[${ant.project.name}] Running VB6 does not work when currently opened!">
                <condition>
                    <not>
                        <equals arg1="0" arg2="${exit.code}" />
                    </not>
                </condition>
            </fail>
        </sequential>
    </macrodef>


    <!--
        Macro to compile a specific project

        IN:     project     -> the full path to the project (excluding file suffix)
                errorfile   -> the file to write the error message to if any appear
                builddir    -> the output directory for the project
    -->
    <macrodef name="vb6.make" description="Macro to call VB6.EXE to compile a specific project">
        <attribute name="project" />
        <attribute name="errorfile" />
        <attribute name="builddir" />

        <sequential>
            <vb6 args="/make @{project}.vbp /out @{errorfile} /outdir @{builddir}" />
        </sequential>
    </macrodef>


    <!--
        Macro to compile and run a specific project

        IN:     project     -> the full path to the project (excluding file suffix)
                errorfile   -> the file to write the error message to if any appear
                builddir    -> the output directory for the project
    -->
    <macrodef name="vb6.run" description="Macro to call VB6.EXE to run a specific project">
        <attribute name="project" />
        <attribute name="errorfile" />
        <attribute name="builddir" />

        <sequential>
            <vb6.make project="@{project}" errorfile="@{errorfile}" builddir="@{builddir}" />
            <basename property="out.file" file="@{project}" />
            <exec executable="${builddir}/${out.file}.exe" dir="@{builddir}" />
        </sequential>
    </macrodef>


    <!--
        Macro to read the properties of a specific Visual Basic 6 project

        IN:     project     -> the full path to the project (excluding file suffix)
        OUT:    properties  -> all the entries in the project file
    -->
    <macrodef name="vb6.properties" description="Read the VB6 project properties">
        <attribute name="project" />

        <sequential>
            <property file="@{project}.vbp" />
        </sequential>
    </macrodef>



    <!-- ======================================================================================
                                            MAIN TARGETS
         ====================================================================================== -->



    <target name="ant.init" description="Check that requred Ant property is available">
        <fail message="[${ant.project.name}] Property 'scripts.dir' must be set for every project">
            <condition>
                <not>
                    <isset property="scripts.dir" />
                </not>
            </condition>
        </fail>
    </target>


    <target name="vb6.init" description="Check that OS matches Windoes and VB6.EXE is available">
        <!-- i) check for Windows NT -->
        <fail message="[${ant.project.name}] Only available for Windows NT operating systems!">
            <condition>
                <not>
                    <os family="winnt" />
                </not>
            </condition>
        </fail>

        <!-- ii) check for VB6.EXE (32 / 64-bit OS) -->
        <condition property="VB6.path" value="C:\Program Files\Microsoft Visual Studio\VB98">
            <available file="C:\Program Files\Microsoft Visual Studio\VB98\VB6.EXE"
                       type="file" />
        </condition>

        <condition property="VB6.path" value="C:\Program Files (x86)\Microsoft Visual Studio\VB98">
            <available file="C:\Program Files (x86)\Microsoft Visual Studio\VB98\VB6.EXE"
                       type="file" />
        </condition>

        <!-- iii) fail if nothing found regarding VB6.EXE -->
        <fail message="[${ant.project.name}] VB6.EXE could not be found in default directories!">
            <condition>
                <not>
                    <isset property="VB6.path" />
                </not>
            </condition>
        </fail>
    </target>


    <target name="vb6.open" depends="vb6.init" description="Open the Visual Basic 6 IDE">
        <vb6 />
    </target>


    <target name="vb6.help" depends="vb6.init" description="Show the help window">
        <vb6 args="/?" />
    </target>


    <target name="vb6.make" depends="ant.init,vb6.init" description="Build the project">
        <checkPropertyAvailable name="project" />
        <checkPropertyAvailable name="errorfile" />
        <checkPropertyAvailable name="builddir" />

        <vb6.make project="${project}" errorfile="${errorfile}" builddir="${builddir}" />
    </target>


    <target name="vb6.run" depends="ant.init,vb6.init" description="Run the project">
        <checkPropertyAvailable name="project" />
        <checkPropertyAvailable name="errorfile" />
        <checkPropertyAvailable name="builddir" />

        <vb6.run project="${project}" errorfile="${errorfile}" builddir="${builddir}" />
    </target>



    <!-- ======================================================================================
                                        VB6 PROJECT TARGETS
         ====================================================================================== -->



    <target name="vb6.project.create" description="Target to create a VB6 project directory">
        <checkPropertyAvailable name="baseDir" />
        <checkPropertyAvailable name="projectName" />

        <!-- create project directory (build / scripts / src) -->
        <mkdir dir="${baseDir}/${projectName}" />
        <mkdir dir="${baseDir}/${projectName}/build" />
        <mkdir dir="${baseDir}/${projectName}/scripts" />
        <mkdir dir="${baseDir}/${projectName}/scripts/VB6Ant" />
        <mkdir dir="${baseDir}/${projectName}/src" />
        <mkdir dir="${baseDir}/${projectName}/src/Classes" />
        <mkdir dir="${baseDir}/${projectName}/src/Controls" />
        <mkdir dir="${baseDir}/${projectName}/src/Forms" />
        <mkdir dir="${baseDir}/${projectName}/src/Modules" />
        <mkdir dir="${baseDir}/${projectName}/src/Resources" />

        <!-- create .gitattributes file (special file for handling Windows line endings) -->
        <copy file="${VB6Ant.dir}/templates/template.gitattributes" overwrite="false"
              tofile="${baseDir}/${projectName}/.gitattributes" />

        <!-- create .gitignore file (containing the build files) -->
        <copy file="${VB6Ant.dir}/templates/template.gitignore" overwrite="false"
              tofile="${baseDir}/${projectName}/.gitignore" />

        <!-- create README.md file (containing basic information about the project) -->
        <copy file="${VB6Ant.dir}/templates/template.README.md" overwrite="false"
              tofile="${baseDir}/${projectName}/README.md" />
        <replace file="${baseDir}/${projectName}/README.md"
                 token="##TPL_PROJECT_NAME##"
                 value="${projectName}" />

        <!-- copy (templated) build.xml files and replace templates -->
        <copy file="${VB6Ant.dir}/templates/template.build.xml" overwrite="false"
              tofile="${baseDir}/${projectName}/scripts/build.xml" />
        <replace file="${baseDir}/${projectName}/scripts/build.xml"
                 token="##TPL_PROJECT_NAME##"
                 value="${projectName}" />

        <!-- copy THIS library into the project, user can replace it with the Git submodule -->
        <copy file="${ant.file}" overwrite="false"
              toFile="${baseDir}/${projectName}/scripts/VB6Ant/VB6Ant.xml" />
    </target>


    <target name="vb6.project.update" description="Update 'VB6Ant.xml' copied into project">
        <checkPropertyAvailable name="projectDir" />

        <!-- INFO: Will overwrite even when using the Git submodule, handle with caution! -->
        <copy file="${ant.file}" overwrite="true"
              toFile="${projectDir}/scripts/VB6Ant/VB6Ant.xml" />
    </target>


    <target name="vb6.project.sonar" description="Onboard project into SonarCloud">
        <checkPropertyAvailable name="projectDir" />
        <checkPropertyAvailable name="organization" />
        <checkPropertyAvailable name="token" />

        <basename property="projectName" file="${projectDir}" />

        <property name="sonar-project.properties"
                  value="${projectDir}/sonar-project.properties" />
        <property name=".sonar-project.properties"
                  value="${projectDir}/.sonar-project.properties" />
        <vb6.properties project="${projectDir}/${projectName}" />

        <!-- copy (templated) Sonar properties and replace templates -->
        <copy file="${VB6Ant.dir}/templates/template.sonar-project.properties" overwrite="true"
              toFile="${sonar-project.properties}" />
        <replace file="${sonar-project.properties}"
                 token="##TPL_ORGANIZATION##"
                 value="${organization}" />
        <replace file="${sonar-project.properties}"
                 token="##TPL_PROJECT_KEY##"
                 value="${VersionCompanyName}:${projectName}" />
        <replace file="${sonar-project.properties}"
                 token="##TPL_PROJECT_NAME##"
                 value="${projectName}" />
        <replaceregexp file="${sonar-project.properties}"
                       match="&quot;"
                       replace=""
                       flags="g"/>

        <!-- create file containing token to SonarCloud -->
        <echo file="${.sonar-project.properties}"
              message="sonar.token=${token}" />
    </target>
</project>
